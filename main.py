from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import os
load_dotenv('token.env')
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (—Ü–µ–Ω–∑—É—Ä–∞)
BLACKLIST = {"–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ä–µ–¥–∏—Å–∫–∞"}  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

# –§–∏–ª—å—Ç—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ü–∏—Ñ—Ä—ã
def has_numbers(message: Message) -> bool:
    return any(char.isdigit() for char in message.text)

# –§–∏–ª—å—Ç—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
def has_bad_words(message: Message) -> bool:
    text_lower = message.text.lower()
    return any(word in text_lower for word in BLACKLIST)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —ç—Ö–æ–±–æ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/caps <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä\n"
        "/reverse <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/help - –ø–æ–º–æ—â—å"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        "–§–∏–ª—å—Ç—Ä—ã –±–æ—Ç–∞:\n"
        "‚ùå –¶–µ–Ω–∑—É—Ä–∞ (–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞)\n"
        "üî¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏\n"
        "üìè –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (>100 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/caps <—Ç–µ–∫—Å—Ç> - CAPS LOCK\n"
        "/reverse <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /caps
@dp.message(Command(commands=['caps']))
async def caps_command(message: Message):
    text = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    if not text:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /caps –ø—Ä–∏–≤–µ—Ç")
        return
    await message.answer(text.upper())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reverse
@dp.message(Command(commands=['reverse']))
async def reverse_command(message: Message):
    text = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""
    if not text:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /reverse –ø—Ä–∏–≤–µ—Ç")
        return
    await message.answer(text[::-1])

# –§–∏–ª—å—Ç—Ä: —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏
@dp.message(F.text, has_numbers)
async def handle_numbers(message: Message):
    await message.answer("üî¢ –Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏!")

# –§–∏–ª—å—Ç—Ä: –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
@dp.message(F.text, has_bad_words)
async def handle_bad_words(message: Message):
    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ!")

# –§–∏–ª—å—Ç—Ä: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text, lambda message: len(message.text) > 100)
async def handle_long_text(message: Message):
    await message.answer("üìè –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: Message):
    await message.answer(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ (ID: {message.photo[-1].file_id})")

# –≠—Ö–æ-–æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã)
@dp.message(F.text)
async def send_echo(message: Message):
    await message.reply(message.text)

if __name__ == '__main__':
    dp.run_polling(bot)